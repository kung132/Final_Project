<?xml version="1.0" encoding="UTF-8"?> <!-- xml 헤더 -->
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd"> <!-- xml 파일의 유효성 검사 -->

<!-- 
	* Log4J 의 설정파일
	1. Log4J 의 메세지 레벨
	=> 기록되는 메세지에 중요도를 매긴다. (6단계로 갈수록 중요, 1단계로 갈수록 일어나는 빈도가 높아짐)
	- 1 단계 : TRACE
			 프로그램 내에서 발생하는 모든 사소한 작업들을 기록
			 (너무 시시콜콜한 나머지 개발자가 쓸 수 없게 막아둠 => 로그가 많이 쌓이면 용량을 많이 차지하므로)
	- 2 단계 : DEBUG
			 개발할 때 필요에 의해서 확인해야할 부분에 대한 기록
			 배포할때에는 필요가 없다.
			 (말그대로 개발자가 오류를 찾기 위해 사용)
	- 3 단계 : INFO
			 사용자에게 알려줘야 할 정보에 대한 기록
	- 4 단계 : WARN
			 실행은 되지만 문제가 생길 소지가 있을 경우의 기록
	- 5 단계 : ERROR
			 어떤 문제에 의해서 실행이 아예 안되는 경우의 기록
	- 6 단계 : FATAL
			 시스템에 치명적인 오류의 기록
			(너무 중요한 기록이라서 개발자가 쓸 수 없게끔 막아둠 => 중요도가 가장 높음)
			
	2. 설정 태그와 그 역할
	- logger 태그 : 로깅을 수행하기 위한 도구(Logger)에 대한 설정
	- root 태그 : 전반적인 로깅을 설정 (logger 태그에서 설정하고 남은 것들에 대한 설정)
				 logger 가 없어도 root 만 있다면 모든 설정을 한번에 끝낼 수 있음
	- appender 태그 : 로깅을 어디에 할건지를 설정하는 도구 (파일, 콘솔, 이메일 등)
	
	3. 사용 가능한 appender 종류
	- ConsoleAppender : 콘솔에 출력하는 도구
	- FileAppender : 파일에 출력하는 도구
	- DailyRollingFileAppender : 날짜별로 파일에 쪼개서 출력하는 도구
	- RollingFileAppender : 용량별로 구분해서 파일에 출력하는 도구
-->
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- Appenders -->
	<!-- 로그 메세지를 콘솔에 찍겠다. -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<!-- 내부적으로 System.out 과 같은 역할을 수행하겠다. -->
		<param name="Target" value="System.out" />
		<!-- 
			로그메세지 내용물을 찍는 폼을 지정
			%-5p : %c       			  - %m	   %n
			INFO : com.kh.spring10.Test01 - 난 info야
			
			메세지의 레이아웃을 설정 (내 입맛대로 커스터마이징이 가능)
			- %p : 메세지 레벨, (-5 는 해당 메세지 레벨을 5칸 왼쪽에다가 적겠다.)
			- %c : 카테고리 정보, 로깅이 발생한 대상의 정보
			- %m : 메세지 내용, 실제 로깅 메세지 정보
			- %n : 개행 (\n 을 의미)
			- %d : 시간 정보, SimpleDateFormat 형식 그대로 사용 가능
		-->
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>
	
	<!-- appender 커스터마이징 할것임!! -->
	<!-- 파일 출력 도구 (.xml) -->
	<appender name="xml" class="org.apache.log4j.FileAppender">
		<!-- 파일명 (파일명만 쓸 경우 상대경로에 의해 지금 내 프로젝트 안에 생김) -->
		<param name="file" value="log.xml"></param>
		<!-- 이어쓰기 (append) 를 하겠다. 덮어쓰기 시 false. -->
		<param name="append" value="true"></param>
		<!-- Log4j 에서 제공하는 양식 (틀에 맞춰서 텍스트로 찍어내겠다) -->
		<layout class="org.apache.log4j.xml.XMLLayout"></layout>
	</appender>
	
	<!-- 파일 출력 도구 (.out) -->
	<appender name="out" class="org.apache.log4j.FileAppender">
		<param name="file" value="log.out"></param>
		<param name="append" value="true"></param>
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p : %c - %m (%d{yyyy-MM-dd HH:mm:ss}) %n"></param>
		</layout>
	</appender>
	
	<!-- 날짜별로 파일이 바뀌는 도구 (.log) -->
	<appender name="daily" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="file" value="C:/mylog/daily"></param>
		<param name="append" value="true"></param>
		<!-- 파일명에 해당하는 날짜 패턴 -->
		<param name="DatePattern" value="'_'yyyyMMdd'.log'"></param>
		<!-- 로그파일 내용물에 해당하는 패턴 -->
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p : %c - %m (%d{yyyy-MM-dd HH:mm:ss}) %n"></param>
		</layout>
	</appender>
	
	<!-- Application Loggers -->
	<!-- 현재 내가 만든 자바 프로젝트 내에서 -->
	<!-- com.kh.spring10 패키지 내에서의 오류 메세지 수준을 info 부터만 찍겠다.  -->
	<!-- 
	<logger name="com.kh.spring10">
		<level value="debug" />
	</logger>
	-->
	
	<!-- 3rdparty Loggers -->
	<!-- 제 3자 (남이 만든거 : spring framework) -->
	<!-- 
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>	
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>
	-->

	<!-- Root Logger -->
	<!-- 최상위 : 다 받아 쳐줄수 있는거 (전반적인 것) -->
	<root>
		<!-- 
			전반적으로 info 수준 이상만 보겠다.
			(개발할 때에는 debug 로 설정해두고, 배포할 때에는 info 로 바꾸자)
		-->
		<!-- 콘솔창에 로그 메세지를 debug 부터 찍겠다. -->
		<priority value="debug" />
		<appender-ref ref="daily" />
		<appender-ref ref="console" />
		<!-- 원하는 만큼  추가 가능 -->
	</root>
	
</log4j:configuration>
